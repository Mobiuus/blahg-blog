---
import Layout from "../../components/Layout.astro";
import Post from "../../components/Post.astro";
import { SITE_TITLE, SITE_DESCRIPTION } from "../../config";
import type { MarkdownInstance } from 'astro';

interface Frontmatter {
    title: string;
    description: string;
    slug: string;
    tags: string[];
    added: string;
}

type PostType = MarkdownInstance<Frontmatter>;

export async function getStaticPaths(): Promise<Array<{params: {tag: string}, props: {tag: PostType[]}}>> {
    const posts: PostType[] = await Astro.glob<Frontmatter>(`../../posts/*.md`);
    const tags: Record<string, PostType[]> = posts.reduce((allTags: Record<string, PostType[]>, post: PostType) => {
        const postTags = post.frontmatter.tags;
        if (postTags) {
            postTags.forEach((tag: string) => {
                if (!allTags[tag]) {
                    allTags[tag] = [];
                }
                allTags[tag].push(post);
            });
        }
        return allTags;
    }, {});

    return Object.entries(tags).map(([t, posts]) => ({
        params: { tag: t },
        props: { tag: posts },
    }));
}

const { tag } = Astro.props;
const { tag: currentTag } = Astro.params;
let sortedPosts = tag.sort(
    (a: PostType, b: PostType) =>
        new Date(b.frontmatter.added).valueOf() -
        new Date(a.frontmatter.added).valueOf()
);
---
<Layout title={`${currentTag} - ${SITE_TITLE}`} description={SITE_DESCRIPTION}>
  <h3>Posts tagged with "{currentTag}"</h3>
  <ul class="tags-list">
    {sortedPosts.map(({url, frontmatter: { description, slug, title, tags, added: date }}: PostType) =>
      <Post url={url} description={description} date={date} slug={slug} title={title} tags={tags} />
    )}
  </ul>
</Layout>