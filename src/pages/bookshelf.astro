---
// src/pages/bookshelf.astro
import BaseHead from "../components/BaseHead.astro";
import Header from "../components/Header.astro";
import Footer from "../components/Footer.astro";
import { getAllBooks } from "../lib/books";
import { FaChevronLeft, FaChevronRight } from "react-icons/fa";

const books = getAllBooks();
---

<html lang="en">
  <head>
    <BaseHead title="Bookshelf | Your Site" description="My bookshelf" />
    <style>
      .bookshelf-title {
        text-align: center;
        font-size: 1.2em;
        margin-bottom: 20px;
        color: #888;
      }
      .bookshelf-container {
        position: relative;
        width: 100%;
        overflow: hidden;
        padding: 0 40px;
      }
      .bookshelf {
        display: flex;
        padding: 40px 0;
        transition: transform 0.3s ease;
      }
      .book-container {
        perspective: 1000px;
        width: 41.5px;
        height: 220px;
        flex-shrink: 0;
        transform-style: preserve-3d;
        transition: all 0.5s ease;
        margin-right: 12px;
      }
      .book {
        width: 100%;
        height: 100%;
        position: relative;
        transform-style: preserve-3d;
        transition: transform 0.5s;
        cursor: pointer;
      }
      .book-spine {
        position: absolute;
        width: 100%;
        height: 100%;
        display: flex;
        align-items: center;
        justify-content: center;
        writing-mode: vertical-rl;
        text-orientation: mixed;
        font-size: 12px;
        backface-visibility: hidden;
        transition: transform 0.5s;
        transform-origin: left;
        background-color: inherit;
        filter: brightness(0.8) contrast(2);
      }
      .book-spine::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        opacity: 0.4;
        filter: url(#paper);
        pointer-events: none;
      }
      .book-cover {
        position: absolute;
        width: 166px;
        height: 100%;
        left: 41.5px;
        backface-visibility: hidden;
        transform: rotateY(90deg);
        transition: transform 0.5s;
        transform-origin: left;
        background-size: cover;
        background-position: left center;
        filter: brightness(0.8) contrast(2);
      }
      .book-cover::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        opacity: 0.4;
        filter: url(#paper);
        pointer-events: none;
      }
      .book-cover::after {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: linear-gradient(to right, rgba(255, 255, 255, 0) 2px, rgba(255, 255, 255, 0.5) 3px, rgba(255, 255, 255, 0.25) 4px, rgba(255, 255, 255, 0.25) 6px, transparent 7px, transparent 9px, rgba(255, 255, 255, 0.25) 9px, transparent 12px);
        pointer-events: none;
      }
      .book.open {
        transform: translateX(-41.5px);
      }
      .book.open .book-spine {
        transform: rotateY(-90deg);
      }
      .book.open .book-cover {
        transform: rotateY(0deg);
      }
      .book-container.open {
        width: 207.5px;
        margin-right: 12px;
        margin-left: -29px;
      }
      .scroll-arrow {
        position: absolute;
        top: 50%;
        transform: translateY(-50%);
        background: rgba(255, 255, 255, 0.1);
        color: rgba(255, 255, 255, 0.5);
        border: none;
        padding: 20px 10px;
        font-size: 20px;
        cursor: pointer;
        z-index: 10;
        transition: all 0.3s ease;
      }
      .scroll-arrow:hover {
        background: rgba(255, 255, 255, 0.2);
        color: rgba(255, 255, 255, 0.8);
      }
      .scroll-left { left: 0; }
      .scroll-right { right: 0; }
      .book-details {
        display: none;
        margin-top: 40px;
        padding: 20px;
        border-top: 1px solid #333;
        text-align: left;
      }
      .book-details h3 {
        margin: 0;
        font-size: 1.4em;
        color: #fff;
        font-weight: bold;
        text-align: left;
      }
      .book-details p {
        margin: 10px 0;
        color: #888;
        text-align: left;
      }
      .book-details .author {
        font-style: italic;
        color: #888;
        margin-top: 10px;
        text-align: left;
      }
    </style>
  </head>
  <body>
    <Header title="Bookshelf" />
    <main>
      <h2 class="bookshelf-title">A virtual version of my real bookshelf!</h2>
      <svg style={{ position: "absolute", inset: 0, visibility: "hidden" }}>
        <defs>
          <filter id="paper" x="0%" y="0%" width="100%" height="100%">
            <feTurbulence type="fractalNoise" baseFrequency="0.9" numOctaves="8" result="noise" />
            <feDiffuseLighting in="noise" lighting-color="white" surfaceScale="1" result="diffLight">
              <feDistantLight azimuth="45" elevation="35" />
            </feDiffuseLighting>
          </filter>
        </defs>
      </svg>
      <div class="bookshelf-container">
        <div class="scroll-arrow scroll-left"><FaChevronLeft /></div>
        <div class="scroll-arrow scroll-right"><FaChevronRight /></div>
        <div class="bookshelf" id="bookshelf">
          {books.map((book) => (
            <div class="book-container" key={book.slug}>
              <div class="book" data-slug={book.slug} data-author={book.author} data-summary={book.summary}>
                <div 
                  class="book-spine"
                  style={`background-color: ${book.spineColor}; color: ${book.textColor};`}
                >
                  {book.title}
                </div>
                <div 
                  class="book-cover" 
                  style={`background-image: url(${book.coverImage});`}
                ></div>
              </div>
            </div>
          ))}
        </div>
      </div>
      <div id="book-details" class="book-details"></div>
    </main>
    <Footer />
    <script>
      interface Book {
        slug: string;
        title: string;
        author: string;
        date: string;
        rating: number;
        coverImage: string;
        spineColor: string;
        textColor: string;
        summary: string;
      }

      const bookshelf = document.getElementById('bookshelf');
      const books: NodeListOf<Element> = document.querySelectorAll('.book');
      const scrollLeftArrow = document.querySelector('.scroll-left') as HTMLElement;
      const scrollRightArrow = document.querySelector('.scroll-right') as HTMLElement;
      const bookDetails = document.getElementById('book-details') as HTMLElement;
      let scrollPosition = 0;
      let scrollInterval: number | null = null;

      function scroll(direction: number) {
        if (!bookshelf) return;
        const scrollAmount = 3;
        scrollPosition += direction * scrollAmount;
        const maxScroll = bookshelf.scrollWidth - bookshelf.clientWidth;
        scrollPosition = Math.max(0, Math.min(scrollPosition, maxScroll));
        (bookshelf as HTMLElement).style.transform = `translateX(${-scrollPosition}px)`;

        if (scrollLeftArrow) scrollLeftArrow.style.display = scrollPosition > 0 ? 'block' : 'none';
        if (scrollRightArrow) scrollRightArrow.style.display = scrollPosition < maxScroll ? 'block' : 'none';
      }

      function startScroll(direction: number) {
        stopScroll();
        scrollInterval = window.setInterval(() => scroll(direction), 16);
      }

      function stopScroll() {
        if (scrollInterval !== null) {
          clearInterval(scrollInterval);
        }
      }

      if (scrollLeftArrow) {
        scrollLeftArrow.addEventListener('mouseenter', () => startScroll(-1));
        scrollLeftArrow.addEventListener('mouseleave', stopScroll);
      }
      if (scrollRightArrow) {
        scrollRightArrow.addEventListener('mouseenter', () => startScroll(1));
        scrollRightArrow.addEventListener('mouseleave', stopScroll);
      }

      books.forEach((book) => {
        book.addEventListener('click', () => {
          const container = book.closest('.book-container');
          if (!container) return;
          const isOpening = !container.classList.contains('open');
          
          books.forEach((b) => {
            const cont = b.closest('.book-container') as HTMLElement;
            if (!cont) return;
            b.classList.remove('open');
            cont.classList.remove('open');
            cont.style.width = '41.5px';
            cont.style.marginLeft = '0';
            cont.style.transform = 'translateX(0)';
          });
          
          if (isOpening) {
            book.classList.add('open');
            container.classList.add('open');
            (container as HTMLElement).style.width = '207.5px';
            (container as HTMLElement).style.marginLeft = '-29px';
            
            // Décaler les livres à gauche
            let prevSibling = container.previousElementSibling;
            let leftShift = 29;
            while (prevSibling) {
              (prevSibling as HTMLElement).style.transform = `translateX(-${leftShift}px)`;
              prevSibling = prevSibling.previousElementSibling;
            }
            
            // Décaler les livres à droite
            let nextSibling = container.nextElementSibling;
            let rightShift = -40;
            while (nextSibling) {
              (nextSibling as HTMLElement).style.transform = `translateX(${rightShift}px)`;
              nextSibling = nextSibling.nextElementSibling;
            }
            
            if (bookshelf) {
              const bookshelfRect = bookshelf.getBoundingClientRect();
              const bookRect = container.getBoundingClientRect();
              const targetScrollLeft = bookRect.left - bookshelfRect.left + (bookRect.width / 2) - (bookshelfRect.width / 2) - 29;
              (bookshelf as HTMLElement).scrollLeft += targetScrollLeft;
            }

            // Afficher les détails du livre
            const slug = book.getAttribute('data-slug');
            const title = book.querySelector('.book-spine')?.textContent;
            const author = book.getAttribute('data-author');
            const summary = book.getAttribute('data-summary');

            if (bookDetails && title && author) {
              bookDetails.innerHTML = `
                <div style="border-top: 1px solid #333; padding-top: 20px;">
                  <h3 style="font-weight: bold; color: white; text-align: left;">${title}</h3>
                  <p class="author">${author}</p>
                  <br>
                  <p>${summary}</p>
                </div>
              `;
              bookDetails.style.display = 'block';
            }
          } else {
            bookDetails.style.display = 'none';
          }
        });
      });

      if (scrollLeftArrow) scrollLeftArrow.style.display = 'none';
      if (scrollRightArrow && bookshelf) {
        scrollRightArrow.style.display = bookshelf.scrollWidth > bookshelf.clientWidth ? 'block' : 'none';
      }
    </script>
  </body>
</html>
